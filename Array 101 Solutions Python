---------------------------------#Max Consecutive Ones---------------------------------
#Given a binary array, find the maximum number of consecutive 1s in this array.
----------------------------------------------------------------------------------------
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_num = count = 0
        for i in nums:
            if i==1:
                count = count+1
            else:
                count = 0
            if max_num <= count :
                max_num = count
        return max_num
                    

---------------#Find Numbers with Even Number of Digits---------------------------------
#Given an array nums of integers, return how many of them contain an even number of digits.
----------------------------------------------------------------------------------------
class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i in nums:
            if (len(str(i))%2== 0):
                count += 1
        return count


class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i in nums:
            temp_count = 0
            while i!=0 :
                i //= 10
                temp_count += 1
            if (temp_count % 2 == 0):
                count += 1
        return count


-----------------------------#Squares of a Sorted Array---------------------------------
#Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
----------------------------------------------------------------------------------------

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        new_nums = []
        for i in nums:
            new_nums.append(i**2)
            new_nums.sort()
        return new_nums


----------------------------------#Duplicate Zeros--------------------------------------
#Given a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.
----------------------------------------------------------------------------------------
class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        """
        Do not return anything, modify arr in-place instead.
        """
        ---------------------------------#Max Consecutive Ones---------------------------------
#Given a binary array, find the maximum number of consecutive 1s in this array.
----------------------------------------------------------------------------------------
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_num = count = 0
        for i in nums:
            if i==1:
                count = count+1
            else:
                count = 0
            if max_num <= count :
                max_num = count
        return max_num
                    

---------------#Find Numbers with Even Number of Digits---------------------------------
#Given an array nums of integers, return how many of them contain an even number of digits.
----------------------------------------------------------------------------------------
class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i in nums:
            if (len(str(i))%2== 0):
                count += 1
        return count


class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i in nums:
            temp_count = 0
            while i!=0 :
                i //= 10
                temp_count += 1
            if (temp_count % 2 == 0):
                count += 1
        return count


-----------------------------#Squares of a Sorted Array---------------------------------
#Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
----------------------------------------------------------------------------------------

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        new_nums = []
        for i in nums:
            new_nums.append(i**2)
            new_nums.sort()
        return new_nums


----------------------------------#Duplicate Zeros--------------------------------------
#Given a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.
----------------------------------------------------------------------------------------
class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        """
        Do not return anything, modify arr in-place instead.
        """
        i=0
        while i < len(arr):
            if arr[i] == 0 :
                arr.insert(i+1,0)
                arr.pop(-1) 
                i += 1
            i += 1
                


class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        """
        Do not return anything, modify arr in-place instead.
        """
        itr = iter(range(len(arr)))
        for i in itr:
            if arr[i] == 0 :
                arr.insert(i+1,0)
                next(itr)
                arr.pop(-1) 
         

                                 
----------------------------------#Merge Sorted Array-----------------------------------
#Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
#The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.
----------------------------------------------------------------------------------------
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        res = nums1[:m] + nums2
        res.sort()   
        for i in range(len(res)):
            nums1[i] = res[i]
   
   
   
--------------------------------------#Remove Element-----------------------------------
#Given an array nums and a value val, remove all instances of that value in-place and return the new length.
----------------------------------------------------------------------------------------
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        while val in nums:
            nums.remove(val)
			
			
--------------------------------------#Remove Duplicates from Sorted Array--------------
#Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.
----------------------------------------------------------------------------------------
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        nums = list(set(nums))
        print(nums)
		
		
--------------------------------------#Check If N and Its Double Exist--------------
Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).
----------------------------------------------------------------------------------------
class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        for i in range(len(arr)):
            for j in range(len(arr)):
                if i != j :
                    if arr[i] == 2 * arr[j]:
                        return True
                    

--------------------------------------#Valid Mountain Array----------------------------
Given an array of integers arr, return true if and only if it is a valid mountain array.
----------------------------------------------------------------------------------------
class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        length = len(arr)
        flag = False
        if length >= 3 :
            for i in range(1,length):
                if arr[i]>arr[i-1]:
                    flag = True
                else:
                    break
            if flag:
                for i in range(i, length):
                    if arr[i]<arr[i-1]:
                        flag = True
                    else:
                        flag = False
                        break
        return flag
		


----------------# Replace Elements with Greatest Element on Right Side------------------
Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.
----------------------------------------------------------------------------------------
class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        length = len(arr)
        for i in range(length) :
            if i == length-1 :
                arr[i] = -1
            else :
                arr[i] = max(arr[i+1:])
        return arr     
                       


----------------------------------# Move Zeroes-----------------------------------------
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements
----------------------------------------------------------------------------------------
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        length  = len(nums)
        i = 0
        while i < length:
            if nums[i] == 0:
                nums.pop(i)
                length -= 1
                nums.append(0)
            else :
                i+=1
        print(nums)


